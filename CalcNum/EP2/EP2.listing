# Precisão para a parada do Programa
vPrecisao = 1.E-3

def fGaussSeidel(tMatrix, tX0, tB):

    #########################################

    # Definição dos parâmetros do problema,
    # a escolha do erro é arbitrária

    vPasso = 0
    vErro = 10
    tXPasso = tX0[:]
    vDimensao = len(tX0)

    print("Passo: ", vPasso)
    print("Erro: --")
    print("Solução neste passo: ", tXPasso)

    #########################################

    # Loop principal do método

    while vErro > vPrecisao:

    # Salva o Valor do passo atual para
    # calcular o erro posteriormente

        tXProxPasso = tXPasso[:]

    #########################################

    # Calculo do próximo passo

        for vLinha in range(vDimensao):

            vSoma = 0

    # Ignora os elementos da diagonal

            for vColuna in range(vDimensao):

                if vColuna == vLinha:

                    continue

    # Diferença do método é utilizar nesta soma tXPasso
    # ao invés de utilizar tXProxPasso

                vSoma = vSoma + tXPasso[vColuna] * tMatrix[vLinha][vColuna]

            vFator = 1 / tMatrix[vLinha][vLinha]
            tXPasso[vLinha] = vFator * (tB[vLinha] - vSoma)

    #########################################

    # Cálculo do erro

        vErro = 0

        for i in range(vDimensao):

            vErroTemp = abs(tXPasso[i] - tXProxPasso[i])

            if vErroTemp > vErro:

                vErro = vErroTemp

    #########################################

    # Aumenta o contador de passos e printa

        vPasso = vPasso + 1

        print("Passo: ", vPasso)
        print("Erro: ", vErro)
        print("Solução neste passo: ", tXPasso)

    return(tXPasso)

    #########################################

    # Define os valores do problema

tMatrix= [[11.9,0.0,1.8],[0.0,5.3,-1.8],[1,-1,-1]]
tB = [15.0,3.1,0]
tX0 = [0,0,0]

    #########################################

    # Resolve o sistema

tSolucao = fGaussSeidel(tMatrix, tX0, tB)

print("Solução Final: ", tSolucao)
